#!/usr/bin/env bash
set -euo pipefail

# redeploy_clean.sh
# Clean-remove old deployment on a remote Ubuntu server via SSH, optionally wipe DB data,
# re-clone repo, create .env, and start the production Docker Compose stack.
#
# Usage:
#   scripts/redeploy_clean.sh user@host [remote_project_dir] [branch] [--reset-db] [--reset-logs]
#
# Examples:
#   scripts/redeploy_clean.sh ubuntu@203.0.113.10
#   scripts/redeploy_clean.sh ubuntu@api.example.com /opt/ai-affiliate main --reset-db
#
# Notes:
# - Requires SSH access with necessary sudo privileges for docker installation and /data management.
# - By default, keeps existing /data/postgres (DB data). Pass --reset-db to wipe it clean.

SSH_TARGET=${1:-}
REMOTE_DIR=${2:-/opt/ai-affiliate}
BRANCH=${3:-main}
RESET_DB=${4:-}
RESET_LOGS=${5:-}

if [[ -z "${SSH_TARGET}" ]]; then
  echo "Usage: $0 user@host [remote_project_dir] [branch] [--reset-db]" >&2
  exit 1
fi

if [[ "${RESET_DB}" == "--reset-db" ]]; then DO_RESET_DB=1; else DO_RESET_DB=0; fi
if [[ "${RESET_LOGS}" == "--reset-logs" ]]; then DO_RESET_LOGS=1; else DO_RESET_LOGS=0; fi

REPO_URL="https://github.com/mauphunmp-boop/ai-affiliate.git"

REMOTE_SCRIPT=$(cat <<'EOSSH'
set -euo pipefail

REMOTE_DIR="${REMOTE_DIR}"
REPO_URL="${REPO_URL}"
BRANCH="${BRANCH}"
DO_RESET_DB="${DO_RESET_DB}"
DO_RESET_LOGS="${DO_RESET_LOGS}"

echo "[INFO] Remote host: $(hostname -f || hostname)"
echo "[INFO] Target directory: ${REMOTE_DIR}"
echo "[INFO] Repo: ${REPO_URL} (branch: ${BRANCH})"
echo "[INFO] Reset DB: ${DO_RESET_DB}"
echo "[INFO] Reset Logs: ${DO_RESET_LOGS}"

need_cmd() {
  command -v "$1" >/dev/null 2>&1
}

sudo_maybe() {
  if [[ $EUID -ne 0 ]]; then
    if [[ -n "${SUDO_PASS:-}" ]]; then
      # Feed password via stdin, suppress prompt
      echo "${SUDO_PASS}" | sudo -S -p "" "$@"
    else
      # Try passwordless sudo; if not allowed, exit with a clear message
      if sudo -n true 2>/dev/null; then
        sudo "$@"
      else
        echo "[ERROR] sudo password required but SUDO_PASS not provided. Export SUDO_PASS and re-run." >&2
        exit 1
      fi
    fi
  else
    "$@"
  fi
}

echo "[STEP] Ensure git, docker, compose-plugin installed"
if ! need_cmd git || ! need_cmd docker; then
  sudo_maybe apt-get update -y
  sudo_maybe apt-get install -y git docker.io
fi
# Docker Compose v2 plugin
if ! docker compose version >/dev/null 2>&1; then
  sudo_maybe apt-get install -y docker-compose-plugin || true
fi

# Start docker if needed
if ! sudo_maybe systemctl is-active --quiet docker; then
  sudo_maybe systemctl enable --now docker || true
fi

COMPOSE_CMD="docker compose"
if ! ${COMPOSE_CMD} version >/dev/null 2>&1; then
  if command -v docker-compose >/dev/null 2>&1; then
    COMPOSE_CMD="docker-compose"
  else
    echo "[ERROR] Docker Compose not available" >&2
    exit 1
  fi
fi

echo "[STEP] Stop running containers if any"
if [[ -d "${REMOTE_DIR}" ]]; then
  (cd "${REMOTE_DIR}" && ${COMPOSE_CMD} -f docker-compose.prod.yaml down --remove-orphans) || true
fi
# Hard stop any leftover affiliate_ai_* containers
mapfile -t TO_STOP < <(docker ps -a --format '{{.Names}}' | grep -E '^affiliate_ai_' || true)
if [[ ${#TO_STOP[@]} -gt 0 ]]; then
  echo "[INFO] Removing containers: ${TO_STOP[*]}"
  docker rm -f "${TO_STOP[@]}" || true
fi

echo "[STEP] Clean project directory"
sudo_maybe rm -rf "${REMOTE_DIR}"
sudo_maybe mkdir -p "${REMOTE_DIR}"
sudo_maybe chown -R "$USER":"$USER" "${REMOTE_DIR}" || true

echo "[STEP] Clone repository"
git clone "${REPO_URL}" "${REMOTE_DIR}"
cd "${REMOTE_DIR}"
git checkout "${BRANCH}" || true

echo "[STEP] Prepare environment file (.env)"
if [[ -f .env ]]; then
  echo "[INFO] .env already exists, keeping it"
else
  # Generate secure secret
  if command -v openssl >/dev/null 2>&1; then
    SECRET=$(openssl rand -hex 32)
  else
    SECRET=$(head -c 32 /dev/urandom | od -An -tx1 | tr -d ' \n')
  fi
  cat > .env <<EOF
# Auto-generated by redeploy_clean.sh on $(date -Iseconds)
AFF_SECRET=${SECRET}
ADMIN_API_KEY=
EOF
  echo "[INFO] Created .env with a new AFF_SECRET"
fi

echo "[STEP] Ensure data directories"
sudo_maybe mkdir -p /data/postgres /data/backend-logs
sudo_maybe chown -R 999:999 /data/postgres || true
sudo_maybe chown -R "$USER":"$USER" /data/backend-logs || true

if [[ "${DO_RESET_DB}" == "1" ]]; then
  echo "[STEP] Resetting Postgres data at /data/postgres (DANGEROUS)"
  sudo_maybe rm -rf /data/postgres/*
  sudo_maybe chown -R 999:999 /data/postgres || true
fi

if [[ "${DO_RESET_LOGS}" == "1" ]]; then
  echo "[STEP] Resetting backend logs at /data/backend-logs"
  sudo_maybe rm -rf /data/backend-logs/*
  sudo_maybe chown -R "$USER":"$USER" /data/backend-logs || true
fi

echo "[STEP] Bring up production stack"
${COMPOSE_CMD} -f docker-compose.prod.yaml up -d --build

echo "[DONE] Services status:" 
${COMPOSE_CMD} -f docker-compose.prod.yaml ps

echo "\nEndpoints:"
echo "  API (FastAPI):        http://$(hostname -I | awk '{print $1}'):8000/docs"
echo "  Frontend (customer):  http://$(hostname -I | awk '{print $1}'):8080"
echo "  Frontend (admin):     http://$(hostname -I | awk '{print $1}'):8081"

echo "\nTail backend logs (Ctrl+C to stop):"
docker logs --tail=100 -f affiliate_ai_web || true
EOSSH
)

# Export variables for heredoc
export REMOTE_DIR REPO_URL BRANCH DO_RESET_DB DO_RESET_LOGS

echo "[LOCAL] Connecting to ${SSH_TARGET} and performing clean redeploy..."
# Allow custom SSH options via SSH_OPTS environment variable (e.g., SSH_OPTS='-p 2222')
SSH_OPTS=${SSH_OPTS:-}
ssh -o StrictHostKeyChecking=no ${SSH_OPTS} "${SSH_TARGET}" \
  "REMOTE_DIR='${REMOTE_DIR}' REPO_URL='${REPO_URL}' BRANCH='${BRANCH}' DO_RESET_DB='${DO_RESET_DB}' DO_RESET_LOGS='${DO_RESET_LOGS}' SUDO_PASS='${SUDO_PASS:-}' bash -s" <<< "${REMOTE_SCRIPT}"

echo "[LOCAL] Remote redeploy completed."
